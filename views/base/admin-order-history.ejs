<%- include('../base/head.ejs') %>
    <title>Admin Order Management</title>

    <body>
        <header><%- include('../base/header.ejs') %></header>
        <div class="container nav-padding">
            <div class="d-flex align-items-center" style="margin-bottom: -20px;">
                <h2 class="mb-0">Admin Order Management</h2>
            </div>
        
            <div class="d-flex justify-content-start">
                <div class="col-12 col-sm-6">
                    <label for="userSelect" class="form-label"></label>
                    <select id="userSelect" class="form-select" onchange="fetchOrders()">
                        <option value="" selected>Select a User</option>
                        <option value="all">Select All Users</option>
                        <!-- Options will be populated here via JavaScript -->
                    </select>
                </div>
            </div>

            <div id="errorContainer" class="error-message"></div> <!-- Error message container -->
            <div>
                <table class="table table-bordered mt-3" id="orderTable">
                    <thead class="table-light">
                        <tr>
                            <th>User ID</th>
                            <th class="ref-column">Reference Number</th>
                            <th class="dt-column">Order DateTime</th>
                            <th>Total Amount</th>
                            <th>Items</th>
                            <th>Status</th>
                            <th class="action-column">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="orderBody">
                        <!-- Orders will be populated here via JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
        


        <!-- Modal Structure -->
        <div class="modal" id="updateModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header pt-2 pb-2">
                        <h5 class="modal-title p-0" id="statusModalLabel">Update Order Status</h5>
                        <button type="button" class="btn-close" onclick="closeModal()" aria-label="Close">
                        </button>
                    </div>
                    <div class="modal-body">
                        <p id="currentStatusText"></p>
                        <select id="statusSelect" class="form-select custom-select">
                            <option value="Processing">Processing</option>
                            <option value="Cancelled">Cancelled</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                    <div class="modal-footer pt-0 pb-0">
                        <button id="confirmUpdateButton" class="btn btn-primary">Confirm Update</button>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let cachedUsers = []; // Variable to cache user data

            async function fetchUsers() {
                if (cachedUsers.length > 0) {
                    populateUserSelect(cachedUsers); // Use cached data
                    return;
                }

                try {
                    const response = await fetch('/orders/users/all');
                    if (!response.ok) throw new Error('Failed to load users');
                    cachedUsers = await response.json(); // Cache users
                    populateUserSelect(cachedUsers);
                } catch (error) {
                    displayError(error.message);
                }
            }

            function populateUserSelect(users) {
                const userSelect = document.getElementById('userSelect');
                userSelect.innerHTML = '<option value="" selected>Select a User</option><option value="all">Select All Users</option>'; // Reset options

                users.forEach(user => {
                    const option = document.createElement('option');
                    option.value = user.userId; // User ID as value
                    option.textContent = `${user.userName} (${user.userEmail})`; // Display username and email
                    userSelect.appendChild(option);
                });
            }

            async function deleteOrder(orderId) {
                const confirmed = confirm("Are you sure you want to delete this order?");
                if (!confirmed) return; // Exit if the user cancels

                try {
                    const response = await fetch(`/orders/deleteOrder/${orderId}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) throw new Error('Failed to delete order');

                    alert('Order deleted successfully!');
                    fetchOrders(); // Refresh the order list
                } catch (error) {
                    console.error('Error deleting order:', error);
                    displayError(error.message); // Display error message to user
                }
            }

            async function fetchOrders() {
                const userId = document.getElementById('userSelect').value;
                const orderBody = document.getElementById('orderBody');
                orderBody.innerHTML = ''; // Clear existing orders

                // Clear any previous error messages
                displayError('');

                // Check if userId is empty
                if (!userId) {
                    return; // Exit the function if no user is selected
                }

                try {
                    const response = await fetch(userId === "all" ? `/orders/orders/all` : `/orders/user/${userId}`);
                    if (!response.ok) throw new Error('Failed to load orders');

                    const orders = await response.json();

                    if (orders.length === 0) {
                        const row = document.createElement('tr');
                        row.innerHTML = `<td colspan="7" class="text-center">No orders found.</td>`;
                        orderBody.appendChild(row);
                    } else {
                        orders.forEach(order => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                            <td>${order.userId}</td>
                            <td>${order.referenceNumber}</td>
                            <td>${new Date(order.orderDate).toLocaleString('en-HK')}</td>
                            <td>$${order.totalAmount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                            <td>
                                <ul class="item-list">
                                    ${order.items.map(item => `<li>${item.productName} - Qty: ${item.quantity.toLocaleString()} - Price: $${item.price.toFixed(2)}</li>`).join('')}
                                </ul>
                            </td>
                            <td style="color: darkgreen;">${order.status}</td>
                            <td class="action-column">
                                <div class="button-container">
                                    <button onclick="showUpdateModal('${order._id}', '${order.status}')" class="btn btn-warning action-button">Update</button>
                                    <button onclick="deleteOrder('${order._id}')" class="btn btn-danger action-button">Delete</button>
                                </div>
                            </td>
                        `;
                            orderBody.appendChild(row);
                        });
                    }
                } catch (error) {
                    console.error('Error fetching orders:', error);
                    displayError(error.message); // Display error message to user
                }
            }

            function displayError(message) {
                const errorContainer = document.getElementById('errorContainer');
                errorContainer.textContent = message;
            }

            let currentOrderId = null;
            let currentStatus = '';

            function showUpdateModal(orderId, status) {
                currentOrderId = orderId;
                currentStatus = status;
                document.getElementById('currentStatusText').innerText = `*Current Status: ${currentStatus}`;
                document.getElementById('statusSelect').value = currentStatus; // Set the current status in the dropdown
                document.getElementById('updateModal').style.display = 'block';
            }

            function closeModal() {
                document.getElementById('updateModal').style.display = 'none';
            }

            async function updateOrderStatus(orderId, newStatus) {
                try {
                    const response = await fetch(`/orders/update/${orderId}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status: newStatus })
                    });

                    if (!response.ok) throw new Error('Failed to update order status');
                    alert('Order status updated successfully!');
                    fetchOrders(); // Refresh orders
                } catch (error) {
                    console.error('Error updating order status:', error);
                    alert('Failed to update order status.');
                }
            }

            document.getElementById('confirmUpdateButton').onclick = async function () {
                const newStatus = document.getElementById('statusSelect').value;

                // Check if the new status is the same as the current status
                if (newStatus === currentStatus) {
                    alert("The status is already set to the current value. Please select a different status.");
                    closeModal();
                    return; // Exit the function
                }

                // Proceed with the update if the status has changed
                await updateOrderStatus(currentOrderId, newStatus);
                closeModal();
            };

            // Fetch users when the page loads
            window.onload = fetchUsers;
        </script>

        <script>
            // Functionality for the confirm update button
            document.getElementById('confirmUpdateButton').addEventListener('click', function () {
                const selectedStatus = document.getElementById('statusSelect').value;
                document.getElementById('statusDisplay').innerText = selectedStatus;
                // Hide the modal after selection
                $('#updateModal').modal('hide');
            });

            // Adjust modal position on mobile when opening
            document.getElementById('openModalButton').addEventListener('click', function () {
                const modal = document.getElementById('updateModal');
                const buttonRect = this.getBoundingClientRect();

                $(modal).on('shown.bs.modal', function () {
                    if (window.innerWidth <= 576) {
                        const modalDialog = modal.querySelector('.modal-dialog');
                        modalDialog.style.top = `${buttonRect.bottom + window.scrollY + 10}px`; // Position below the button
                        modalDialog.style.left = `${buttonRect.left}px`; // Align with button
                    }
                });
            });
        </script>
 
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
            crossorigin="anonymous"></script>

    </body>

    </html>